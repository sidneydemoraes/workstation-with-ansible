" Last update 241114.1705
" Author: Sidney de Moraes
" Copy to clipboard demands installation of vim-gtk on Linux

" Compatibility
set nocompatible
set t_ut=

" ******************************************************
" ==  PLUGINS
"
" Automatically download vim-plug if it doesn't exist
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" ******************************************************
" ==  LOAD PLUGINS
"
call plug#begin('~/.vim/plugged')
    " Language Support - Load First
    let g:polyglot_disabled = ['autoindent']  " Prevent autoindent conflicts
    Plug 'sheerun/vim-polyglot'               " Collection of language packs

    " Meta Plugins
    Plug 'LucHermitte/lh-vim-lib'            " Requirement for local_vimrc
    Plug 'LucHermitte/local_vimrc'           " Project-specific vim configurations
    Plug 'tpope/vim-eunuch'                  " UNIX shell commands inside VIM

    " Theme and Appearance
    Plug 'itchyny/lightline.vim'             " Custom Status Bar
    Plug 'dracula/vim', { 'as': 'dracula' }  " Theme
    Plug 'tomasr/molokai'                    " Theme
    Plug 'ryanoasis/vim-devicons'            " Icons for plugins
    Plug 'TaDaa/vimade'                      " Fades inactive buffers

    " Git Integration
    Plug 'mhinz/vim-signify'                 " VCS/Git diff in the gutter
    Plug 'tpope/vim-fugitive'                " Git functions inside VIM

    " Refactoring
    Plug 'apalmer1377/factorus'              " Automated refactoring

    " Navigation and Structure
    Plug 'scrooloose/nerdtree'               " File tree navigation
    Plug 'severin-lemaignan/vim-minimap'     " Code minimap
    Plug 'preservim/tagbar'                  " Tag bar
    Plug 'easymotion/vim-easymotion'         " Improved motions
    Plug 'tpope/vim-surround'                " Manipulate surrounding symbols
    Plug 'ctrlpvim/ctrlp.vim'                " Fuzzy finder
    Plug 'michaeljsmith/vim-indent-object'   " Select blocks by indentation

    " Code Editing
    Plug 'terryma/vim-multiple-cursors'      " Multiple cursors support
    Plug 'jiangmiao/auto-pairs'              " Auto-close pairs

    " Code Quality and Linting
    Plug 'dense-analysis/ale'                " Async Lint Engine

    " Syntax Enhancement
    Plug 'ekalinin/dockerfile.vim'           " Dockerfile syntax
    Plug 'tfnico/vim-gradle'                 " Gradle syntax
    Plug 'pangloss/vim-javascript'           " JavaScript syntax
    Plug 'plasticboy/vim-markdown'           " Markdown syntax

    " Code Formatting
    Plug 'junegunn/vim-easy-align'           " Text alignment
    Plug 'editorconfig/editorconfig-vim'     " EditorConfig support
    Plug 'wellle/context.vim'                " Context display
    Plug 'mechatroner/rainbow_csv'           " CSV handling

    " Completion and Snippets
    Plug 'neoclide/coc.nvim', {'branch': 'release'}  " Intelligent completion
    Plug 'scrooloose/nerdcommenter'          " Code commenting
    Plug 'mattn/emmet-vim'                   " HTML snippets

    " Database
    Plug 'tpope/vim-dadbod'                  " Database interface
    Plug 'kristijanhusak/vim-dadbod-ui'      " UI for vim-dadbod

call plug#end()

" ******************************************************
" == PLUGIN CONFIGURATIONS
"

" ALE Configuration
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'python': ['flake8', 'pylint']
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint'],
\   'python': ['black']
\}
let g:ale_fix_on_save = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'
let g:ale_python_flake8_options = '--max-line-length=88'
let g:ale_python_black_options = '--line-length=88'

" Lightline Configuration
let g:lightline = {
      \ 'active': {
      \   'left': [
      \     [ 'mode', 'paste' ],
      \     [ 'gitbranch', 'filename', 'modified' ]
      \   ],
      \   'right': [
      \     [ 'lineinfo' ],
      \     [ 'percent' ],
      \     [ 'fileformat', 'fileencoding', 'filetype' ],
      \     [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ]
      \   ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ }
      \ }

" NERDTree Configuration
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" CtrlP Configuration
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

" Signify Configuration
let g:signify_sign_add               = '+'
let g:signify_sign_delete            = '-'
let g:signify_sign_delete_first_line = '−'
let g:signify_sign_change           = '~'
let g:signify_sign_show_count = 0
let g:signify_sign_show_text = 1

" Cores para os sinais
highlight SignifySignAdd    ctermfg=green  guifg=#00ff00 cterm=NONE gui=NONE
highlight SignifySignDelete ctermfg=red    guifg=#ff0000 cterm=NONE gui=NONE
highlight SignifySignChange ctermfg=yellow guifg=#ffff00 cterm=NONE gui=NONE

" Atalhos de navegação
nmap ]h <plug>(signify-next-hunk)
nmap [h <plug>(signify-prev-hunk)



" ******************************************************
" == MAIN CONFIGURATION
"

" Appearance
colorscheme molokai
set guifont=Monaco\ for\ Powerline:h12
set antialias
set t_Co=256
set background=dark
set laststatus=2

" Encoding
set encoding=utf-8
set fileencoding=utf-8

" Editor Behavior
set hidden
set autoread
set mouse=a
set clipboard=unnamed,unnamedplus
set pastetoggle=<F2>

" Command Line
set wildmenu
set wildmode=list:longest

" Performance
set updatetime=300
set redrawtime=10000

" Indentation and Formatting
syntax enable
filetype plugin indent on
set backspace=indent,eol,start
set complete-=i
set smarttab
set smartindent
set autoindent
set shiftwidth=2
set tabstop=2
set expandtab

" Visual Indicators
set scrolloff=1
set sidescrolloff=5
set display+=lastline
set title
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set list
set number

" Split Behavior
set splitbelow
set splitright

" Search
set ignorecase
set smartcase
set incsearch
set hlsearch

" Backup and Swap
set nobackup
set nowritebackup
set noswapfile

" ********************************************
" == CUSTOM MAPPING
"
nmap <CR> o<Esc>k
nmap <S-Enter> O<Esc>j
nnoremap <C-n> :set norelativenumber!<CR>
nmap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :call ToggleFoldingMethod()<CR>

" ********************************************
" == FUNCTIONS
"
function! ToggleFoldingMethod()
    if &fdm == "indent"
        set fdm=syntax
    else
        set fdm=indent
    endif
endfunction

let t:is_transparent = 0
function! Toggle_transparent_background()
  if t:is_transparent == 0
    hi Normal ctermbg=NONE
    let t:is_transparent = 1
  else
    hi Normal ctermbg=233
    let t:is_transparent = 0
  endif
endfunction
nnoremap <C-x><C-t> :call Toggle_transparent_background()<CR>

" ********************************************
" == FILETYPE SPECIFIC SETTINGS
"
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix
